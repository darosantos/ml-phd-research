# -*- coding: utf-8 -*-
"""Test RF with ObliqueTree of hengzhe-zhang.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oKj681KpJzTfbx0Mz6R2O2716IcxGtIF

# **Test RF with ObliqueTree of hengzhe-zhang**

https://github.com/hengzhe-zhang/scikit-obliquetree

https://pypi.org/project/scikit-obliquetree/
  

```
@misc{scikit-obliquetree,
    author = {ECNU},
    title = {Oblique Decision Tree in Python},
    year = {2021},
    publisher = {GitHub},
    journal = {GitHub repository},
    howpublished = {\url{https://github.com/zhenlingcn/scikit-obliquetree}}
  }
```
"""

pip install typing-extensions

pip install -U scikit-obliquetree

FOLDER_ROOT = '/content/drive/MyDrive'
import sys
sys.path.append(FOLDER_ROOT)

import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.tree import DecisionTreeClassifier

from midas.v4.ensemble import RFClassifier

from scikit_obliquetree.HHCART import HouseHolderCART
from scikit_obliquetree.CO2 import ContinuouslyOptimizedObliqueRegressionTree
from scikit_obliquetree.BUTIF import BUTIF
from scikit_obliquetree.segmentor import MSE, MeanSegmentor

df_stream = pd.read_csv('https://github.com/scikit-multiflow/streaming-datasets/raw/master/agr_a.csv',
                        engine='c', low_memory=True, memory_map=True)

X = df_stream[df_stream.columns[:-1]]
y = df_stream['class']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.70, random_state=100)

from sklearn.linear_model import Ridge, LogisticRegression

cfg_base_estimator={'clustering_method':"k-means",
                    'max_leaf':5,
                    'linear_model':LogisticRegression(penalty='l2', dual=False,
                                                      tol=1e-4, C=1.0,
                                                      fit_intercept=True,
                                                      intercept_scaling=1,
                                                      class_weight='balanced',
                                                      random_state=100,
                                                      solver='lbfgs',
                                                      max_iter=1000,
                                                      multi_class='auto',
                                                      verbose=0,
                                                      warm_start=False,
                                                      n_jobs=-1),
                    'task':"classification",
                    'selector':None,
                    'best_k':None
                  }

rf = RFClassifier(base_estimator=BUTIF,
                  n_estimators=100,
                  params_estimators=cfg_base_estimator,
                  enable_logger=True)

rf._setup_logger(log_file='/content/drive/MyDrive/Testes e Experimentos/Testes/rf.obliquetree.debuging.log')

rf = rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

print('Acc with oblique tree', accuracy_score(y_test, y_pred))

"""Exemplo usando uma única arvore"""

obtBUTIF = BUTIF()
obtBUTIF.fit(X_train.to_numpy(copy=True), y_train.to_numpy(copy=True))

y_pred = obtBUTIF.predict(X_test.to_numpy(copy=True))
print(y_pred[:10])

print('Acc with splitter = oc1', accuracy_score(y_test, y_pred))

"""Resultados do código a seguir executado em diversos parâmetros

```
max_leaf=5, linear_model=LinearRegression
  Acc with oblique tree 0.5971328571428571
  Acc with cart 0.6292342857142857
max_leaf=10, linear_model=Ridge(alpha=1.0)
  Acc with oblique tree 0.6039871428571428
  Acc with cart 0.6290428571428571
max_leaf=10, linear_model=RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1])
  Acc with oblique tree 0.5917071428571429
  Acc with cart 0.6292328571428571
max_leaf=10, linear_model=SGDRegressor(max_iter=1000, tol=1e-3)
  Acc with oblique tree 0.46980428571428573
  Acc with cart 0.6291385714285714
max_leaf=10, linear_model=LogisticRegression(random_state=0)
  Acc with oblique tree 0.59707
  Acc with cart 0.6292957142857143
LogisticRegressionCV(cv=5, random_state=0)
  Acc with oblique tree 0.5971171428571429
  Acc with cart 0.6293728571428572
max_leaf=10, linear_model=PassiveAggressiveClassifier(max_iter=1000, random_state=0, tol=1e-3)
  Acc with oblique tree 0.51803
  Acc with cart 0.6290214285714286
max_leaf=10, linear_model=Perceptron(tol=1e-3, random_state=0)
  Acc with oblique tree 0.5279828571428572
  Acc with cart 0.6292471428571429
max_leaf=10, linear_model=RidgeClassifier()
  Acc with oblique tree 0.6039214285714286
  Acc with cart 0.6288871428571429
max_leaf=10, linear_model=RidgeClassifierCV(alphas=[1e-3, 1e-2, 1e-1, 1])
  Acc with oblique tree 0.5828071428571429
  Acc with cart 0.6292328571428571
max_leaf=10, linear_model=SGDClassifier(max_iter=1000, tol=1e-3)
  Acc with oblique tree 0.49336
  Acc with cart 0.6292357142857142
max_leaf=10, linear_model=ElasticNet(random_state=0)
  Acc with oblique tree 0.6054371428571429
  Acc with cart 0.6292271428571429
max_leaf=10, linear_model=ElasticNetCV(cv=5, random_state=0)
  Acc with oblique tree 0.60543
  Acc with cart 0.6292757142857143
max_leaf=10, linear_model=Lars(n_nonzero_coefs=1)
  Acc with oblique tree 0.6060757142857143
  Acc with cart 0.6292357142857142
max_leaf=10, linear_model=LarsCV(cv=5)
  Acc with oblique tree 0.60407
  Acc with cart 0.6290957142857143
max_leaf=10, linear_model=Lasso(alpha=0.1)
  Acc with oblique tree 0.6051785714285715
  Acc with cart 0.6291585714285715
max_leaf=10, linear_model=LassoCV(cv=5, random_state=0)
  Acc with oblique tree 0.6054314285714286
  Acc with cart 0.6291157142857143
max_leaf=10, linear_model=LassoLars(alpha=0.01)
  Acc with oblique tree 0.5279442857142858
  Acc with cart 0.6292385714285714
LassoLarsCV(cv=5)
  Acc with oblique tree 0.60399
  Acc with cart 0.6292128571428571
LassoLarsIC(criterion='bic')
  Acc with oblique tree 0.60456
  Acc with cart 0.6290042857142857
max_leaf=10, linear_model=OrthogonalMatchingPursuit()
  Acc with oblique tree 0.6064514285714285
  Acc with cart 0.6293071428571428
max_leaf=10, linear_model=OrthogonalMatchingPursuitCV(cv=5)
  Acc with oblique tree 0.6040514285714286
  Acc with cart 0.6290928571428571
max_leaf=10, linear_model=ARDRegression()
  Acc with oblique tree 0.5279442857142858
  Acc with cart 0.62918
max_leaf=10, linear_model=BayesianRidge()
  Acc with oblique tree 0.60416
  Acc with cart 0.6288814285714286
max_leaf=10, linear_model=HuberRegressor()
  Acc with oblique tree 0.5970928571428571
  Acc with cart 0.6291871428571428
max_leaf=10, linear_model=TweedieRegressor()
  Acc with oblique tree 0.5970528571428572
  Acc with cart 0.62895
```



"""

#from scikit_obliquetree.HHCART import HouseHolderCART
#from scikit_obliquetree.segmentor import MSE, MeanSegmentor
from sklearn.linear_model import Ridge, RidgeCV, SGDRegressor, LogisticRegression
from sklearn.linear_model import LogisticRegressionCV, PassiveAggressiveClassifier
from sklearn.linear_model import Perceptron, RidgeClassifier, RidgeClassifierCV
from sklearn.linear_model import SGDClassifier, ElasticNet, ElasticNetCV
from sklearn.linear_model import Lars, LarsCV, Lasso, LassoCV, LassoLars
from sklearn.linear_model import LassoLarsCV, LassoLarsIC, OrthogonalMatchingPursuit
from sklearn.linear_model import OrthogonalMatchingPursuitCV, ARDRegression
from sklearn.linear_model import BayesianRidge, HuberRegressor, TweedieRegressor

obliquetree = BUTIF(max_leaf=10, linear_model=LogisticRegression())
obliquetree.fit(X_train.to_numpy(copy=True), y_train.to_numpy(copy=True))

y_pred = obliquetree.predict(X_test.to_numpy(copy=True))

print('Acc with oblique tree', accuracy_score(y_test, y_pred))

cart = DecisionTreeClassifier()
cart.fit(X_train, y_train)

y_pred = cart.predict(X_test)

print('Acc with cart', accuracy_score(y_test, y_pred))

for leaf in [3, 5, 10, 50, 100, 500, 1000]:
  obliquetree = BUTIF(max_leaf=leaf, linear_model=LogisticRegression())
  obliquetree.fit(X_train.to_numpy(copy=True), y_train.to_numpy(copy=True))

  y_pred = obliquetree.predict(X_test.to_numpy(copy=True))
  print('Acc with oblique tree and param max_leaf=', leaf, ' -> ', accuracy_score(y_test, y_pred))

cart = DecisionTreeClassifier()
cart.fit(X_train, y_train)

y_pred = cart.predict(X_test)

print('Acc with cart', accuracy_score(y_test, y_pred))

"""Exemplo fornecido pelo desenvolvedor"""

from sklearn.datasets import load_boston
from sklearn.ensemble import BaggingRegressor
from sklearn.model_selection import cross_val_score

from scikit_obliquetree.HHCART import HouseHolderCART
from scikit_obliquetree.segmentor import MSE, MeanSegmentor

X, y = load_boston(return_X_y=True)
reg = BaggingRegressor(
    HouseHolderCART(MSE(), MeanSegmentor(), max_depth=3),
    n_estimators=100,
    n_jobs=-1,
)
print('CV Score', cross_val_score(reg, X, y))

